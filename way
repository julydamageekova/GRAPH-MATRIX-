#include <iostream>
#include <queue>
using namespace std;

void bfs(int s, int t, bool** G,int V){
    bool used[V];
    int d [V], p[V];
    for(int i = 0; i < V; i++)
        used[i] = 0;
    if (!used[s]){
        queue <int> A;
        A.push(s);
        used[s] = 1;
        d[s] = 0;
        while(!A.empty()){
            int t = A.front();
            A.pop();
            for( int j = 0; j < V; j++)
                if((!used[j])&& (G[t][j])){
                    A.push(j);
                    used[j] = 1;
                    d[j] = d[t] + 1;
                    p[j] = t;
                }
            }
        }
    cout << " Amount of vertices "<< d[t]; cout << endl;
    int way[d[t] + 1];
    int y = d[t];
    way[y] = t;
    y--;
    while(way[y + 1]!= s){
        way[y] = p[way[y + 1]];
        y--;
    }
    cout << " Way: "<< endl;
    for (int i = 0; i < d[t] + 1; i++)
        cout << way[i] << " ";

}

void matrix (int V, int E, bool** G){
    for ( int i = 0; i < V; i++)
        for ( int j = 0; j < V; j++)
            G[i][j] = false;
    cout << " Enter edges :"<< endl;
    int k,l;
    for (int i = 0; i < E; i++){
        cout << " ";
        cin >> k >> l;
        G[k][l] = true;
        G[l][k] = true;
    }
     for ( int i = 0; i < V; i++){
        for ( int j = 0; j < V; j++){
            cout << G[i][j]<< " ";
        }
        cout << endl;
     }
}

int main()
{
    int V, E;
    cout << " Enter amount of vertexes ";
    cin >> V;
    cout << " Enter amount of edges ( <= V!) ";
    cin >> E;
    bool** G = new bool* [V];
    for(int i = 0; i < V; i++)
        G[i]=new bool [V];
    matrix(V, E, G);
    int s,t;
    cout << " Enter vertices: ";
    cin >> s >> t;
    bfs(s,t, G, V);
    return 0;
}
